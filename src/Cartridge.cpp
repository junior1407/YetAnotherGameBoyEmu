//
// Created by junior1407 on 31/08/22.
//

#include <cstring>
#include <fstream>
#include <vector>
#include "Cartridge.h"

using namespace std;

//48 bytes nintendo logo.
static const uint8_t NINTENDO_LOGO_IMG[] = {
        0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83,
        0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
        0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63,
        0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
};

static const uint8_t GAME_BOY_CLASSIC_INTRO[]  = {
        0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
        0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
        0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
        0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
        0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
        0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
        0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
        0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
        0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
        0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
        0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
        0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
        0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
        0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
        0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x00, 0x00, 0x23, 0x7D, 0xFE, 0x34, 0x20,
        0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x00, 0x00, 0x3E, 0x01, 0xE0, 0x50
};

void Cartridge::storeRawRom() {
    ifstream file(mPath, ios::in | ios::binary | ios::ate);
    if (file.is_open())
    {
        mRomFileSize = static_cast<int> (file.tellg());
        auto * rawBytes = new char[mRomFileSize];
        file.seekg(0, ios::beg);
        file.read(rawBytes, mRomFileSize);
        file.close();
        //TODO: Instead of using "rawBytes", store data directly on mRawRom.
        mRawRom = new u8[mRomFileSize];
        memcpy(mRawRom, rawBytes, mRomFileSize);
    }
    else {
        printf("Failed to read ROM");
    }
}

Cartridge::Cartridge(char *path) {
    strcpy(mPath, path);
    storeRawRom();
    parseMetadata();
}


//TODO: Create a more elegant solution to map flags to enum.
Cartridge::BackwardsCompatibility identifyBackwardsCompatibility(u8 cgbFlag) {
    if (cgbFlag == Cartridge::BACKWARDS_COMPATIBLE_CGB_FLAG) {
        return Cartridge::BackwardsCompatibility::BACKWARDS_COMPATIBLE_CGB;
    }
    if (cgbFlag == Cartridge::CGB_ONLY_FLAG) {
        return Cartridge::BackwardsCompatibility::CGB_ONLY;
    }
    return Cartridge::BackwardsCompatibility::OTHER;
}


void Cartridge::parseMetadata() {
    //Copy game name
    memcpy(mGameName, &mRawRom[GAME_NAME_START_POS], sizeof(mRawRom[0])*
        (GAME_NAME_END_POS- GAME_NAME_START_POS + 1));
    //Verify if nintendo logo is present
    mNintendoLogPresent = std::equal(NINTENDO_LOGO_IMG, NINTENDO_LOGO_IMG+48,
                                     &mRawRom[0x104]);
    mBackWardsCompatibility = identifyBackwardsCompatibility(mRawRom[0x143]);
    mSuperGameBoy = mRawRom[0x146] == 0x03;
    mCartridgeType = identifyCartridgeType(mRawRom[0x147]);
    mRomSize = mRawRom[0x148];
    mRamSize = mRawRom[0x149];
    mMaskRomVersion = mRawRom[0x14C];
    printf("TESTE");
}

Cartridge::CartridgeTypes Cartridge::identifyCartridgeType(u8 type) {
    switch (type) {
        case 0x00:
            // NO MBC
        case 0x08:
            // ROM
            // SRAM
        case 0x09:
            // ROM
            // SRAM
            // BATT
            return CartridgeNoMBC;
        case 0x01:
            // MBC1
        case 0x02:
            // MBC1
            // SRAM
        case 0x03:
            // MBC1
            // SRAM
            // BATT
        case 0xEA:
            // Hack to accept 0xEA as a MBC1 (Sonic 3D Blast 5)
        case 0xFF:
            // Hack to accept HuC1 as a MBC1
            return CartridgeMBC1;
            break;
        case 0x05:
            // MBC2
            // SRAM
        case 0x06:
            // MBC2
            // SRAM
            // BATT
            return CartridgeMBC2;
            break;
        case 0x0F:
            // MBC3
            // TIMER
            // BATT
        case 0x10:
            // MBC3
            // TIMER
            // BATT
            // SRAM
        case 0x11:
            // MBC3
        case 0x12:
            // MBC3
            // SRAM
        case 0x13:
            // MBC3
            // BATT
            // SRAM
        case 0xFC:
            // Game Boy Camera
            return CartridgeMBC3;
            break;
        case 0x19:
            // MBC5
        case 0x1A:
            // MBC5
            // SRAM
        case 0x1B:
            // MBC5
            // BATT
            // SRAM
        case 0x1C:
            // RUMBLE
        case 0x1D:
            // RUMBLE
            // SRAM
        case 0x1E:
            // RUMBLE
            // BATT
            // SRAM
            return CartridgeMBC5;
            break;
        case 0x0B:
            // MMMO1
        case 0x0C:
            // MMM01
            // SRAM
        case 0x0D:
            // MMM01
            // SRAM
            // BATT
        case 0x15:
            // MBC4
        case 0x16:
            // MBC4
            // SRAM
        case 0x17:
            // MBC4
            // SRAM
            // BATT
        case 0x22:
            // MBC7
            // BATT
            // SRAM
        case 0x55:
            // GG
        case 0x56:
            // GS3
        case 0xFD:
            // TAMA 5
        case 0xFE:
            // HuC3
            return CartridgeNotSupported;
            printf("--> ** This cartridge is not supported. Type: %d", type);
            break;

    }
    printf("--> ** Unknown cartridge type: %d", type);
    return CartridgeNotSupported;
}

